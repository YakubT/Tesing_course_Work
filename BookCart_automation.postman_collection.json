{
	"info": {
		"_postman_id": "09b9beb1-de65-4f75-aa85-bfa2b01ce217",
		"name": "BookCart_automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23916958"
	},
	"item": [
		{
			"name": "Book",
			"item": [
				{
					"name": "positiveTesting",
					"item": [
						{
							"name": "Get all books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"test successful status when get books\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"bookId\": 2,\r\n        \"title\": \"HP2\",\r\n        \"author\": \"JKR\",\r\n        \"category\": \"Mystery\",\r\n        \"price\": 235.00,\r\n        \"coverFileName\": \"9d8f4978-0ef8-42d0-873a-4eb583439237HP2.jpg\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{book_api}}/2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{book_api}}",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Categories list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"test get list categories of books has status 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"pm.test(\"test categories are correct\", ()=> {\r",
											"    const resObjArr = pm.response.json();\r",
											"    pm.expect(resObjArr).to.have.length(5);\r",
											"    expectedResult = [\r",
											"        {\r",
											"            \"categoryId\": 1,\r",
											"            \"categoryName\": \"Biography\"\r",
											"        },\r",
											"        {\r",
											"        \"categoryId\": 2,\r",
											"        \"categoryName\": \"Fiction\"\r",
											"    },\r",
											"    {\r",
											"        \"categoryId\": 3,\r",
											"        \"categoryName\": \"Mystery\"\r",
											"    },\r",
											"    {\r",
											"        \"categoryId\": 4,\r",
											"        \"categoryName\": \"Fantasy\"\r",
											"    },\r",
											"    {\r",
											"        \"categoryId\": 5,\r",
											"        \"categoryName\": \"Romance\"\r",
											"    }\r",
											"    ] \r",
											"    pm.expect(resObjArr).to.eql(expectedResult,\"EXPECTED:\"+JSON.stringify(expectedResult)+\r",
											"    \" ACTUAL:\"+JSON.stringify(resObjArr));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{book_api}}/GetCategoriesList",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{book_api}}",
										"GetCategoriesList"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get specific book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"test corectness of book data\",()=> {\r",
											"    pm.expect(pm.response.json()).to.eql({\r",
											"    \"bookId\": data.bookId,\r",
											"    \"title\": data.title,\r",
											"    \"author\": data.author,\r",
											"    \"category\": data.category,\r",
											"    \"price\": data.price,\r",
											"    \"coverFileName\": data.coverFileName\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{book_api}}//{{bookId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{book_api}}",
										"",
										"{{bookId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the random five books from the category of book whose BookId is supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"test corectness of similar book data\",()=> {\r",
											"    const category = data.category;\r",
											"    pm.expect(pm.response.json().map(el=>el.category)).to.eql([category,category,category,category,category],`Expected category:${category}, bookId=${data.bookId} `+pm.response.json());\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/{{book_api}}/GetSimilarBooks/{{bookId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{book_api}}",
										"GetSimilarBooks",
										"{{bookId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negativeTesting",
					"item": [
						{
							"name": "Unauthorized",
							"item": [
								{
									"name": "Delete book without login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check 401 status code: delete book without login\", ()=> {\r",
													"    pm.response.to.have.status(401);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{book_api}}/2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{book_api}}",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update book data without login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check 401 status code: update book without login\", ()=> {\r",
													"    pm.response.to.have.status(401);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"bookId\": 2,\r\n        \"title\": \"HP2\",\r\n        \"author\": \"JKR\",\r\n        \"category\": \"Fiction\",\r\n        \"price\": 235.00,\r\n        \"coverFileName\": \"9d8f4978-0ef8-42d0-873a-4eb583439237HP2.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{book_api}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{book_api}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add new book (unauth)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check 401 status code: add book without login\", ()=> {\r",
													"    pm.response.to.have.status(401);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"bookId\": 91,\r\n        \"title\": \"My book\",\r\n        \"author\": \"Anatolii\",\r\n        \"category\": \"Fiction\",\r\n        \"price\": 235.00,\r\n        \"coverFileName\": \"9d8f4978-0ef8-42d0-873a-4eb583439237HP2.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{book_api}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{book_api}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "login_as_usual_user",
							"item": [
								{
									"name": "Preconditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"token\",pm.response.json()['token']);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\":\"anatolii\",\r\n    \"password\":\"password1234Q\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete book with user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check 403 status code: delete book forbidden for a usual user\", ()=> {\r",
													"    pm.response.to.have.status(403);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{book_api}}/2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{book_api}}",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update book data with user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check 403 status code: update book forbidden\", ()=> {\r",
													"    pm.response.to.have.status(403);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"bookId\": 2,\r\n        \"title\": \"HP2\",\r\n        \"author\": \"JKR\",\r\n        \"category\": \"Fiction\",\r\n        \"price\": 235.00,\r\n        \"coverFileName\": \"9d8f4978-0ef8-42d0-873a-4eb583439237HP2.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{book_api}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{book_api}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add new book with user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check 403 status code: add book forbidden for a usual user\", ()=> {\r",
													"    pm.response.to.have.status(403);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"bookId\": 91,\r\n        \"title\": \"My book\",\r\n        \"author\": \"Anatolii\",\r\n        \"category\": \"Fiction\",\r\n        \"price\": 235.00,\r\n        \"coverFileName\": \"9d8f4978-0ef8-42d0-873a-4eb583439237HP2.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{book_api}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{book_api}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Shopping cart",
			"item": [
				{
					"name": "positive testing",
					"item": [
						{
							"name": "Preconditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"token\",pm.response.json()['token']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"anatolii\",\r\n    \"password\":\"password1234Q\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Login"
									]
								}
							},
							"response": []
						},
						{
							"name": "clear the shopping cart with auth rights",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check clearing cart for any user by not admin user\",()=> {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/ShoppingCart/{{test_user_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"ShoppingCart",
										"{{test_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "add new item to the cart with auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check adding to cart for any user by not admin user\",()=> {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/ShoppingCart/AddToCart/{{test_user_id}}/2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"ShoppingCart",
										"AddToCart",
										"{{test_user_id}}",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "get items of cart with auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check disablity of getting list of items of user in cart without auth\",()=> {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/ShoppingCart/{{test_user_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"ShoppingCart",
										"{{test_user_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negative testing",
					"item": [
						{
							"name": "unauth",
							"item": [
								{
									"name": "clear the shopping cart without auth rights",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check clearing cart for any user by not admin user\",()=> {\r",
													"    pm.expect(pm.response.code).to.not.eql(200);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/ShoppingCart/{{test_user_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"ShoppingCart",
												"{{test_user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "add new item to the cart without auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check adding to cart for any user by not admin user\",()=> {\r",
													"    pm.expect(pm.response.code).to.not.eql(200);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/ShoppingCart/AddToCart/{{test_user_id}}/2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"ShoppingCart",
												"AddToCart",
												"{{test_user_id}}",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "get items of cart without auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check disablity of getting list of items of user in cart without auth\",()=> {\r",
													"    pm.expect(pm.response.code).to.not.eql(200);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/ShoppingCart/{{test_user_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"ShoppingCart",
												"{{test_user_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "auth",
							"item": [
								{
									"name": "Preconditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"token\",pm.response.json()['token']);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\":\"anatolii\",\r\n    \"password\":\"password1234Q\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Login"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete item from cart that is not present",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"test deleting cart item for a user that is not in the cart\",()=> {\r",
													"    pm.expect(pm.response.code).to.not.eql(200);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/ShoppingCart/{{test_user_id}}/3",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"ShoppingCart",
												"{{test_user_id}}",
												"3"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "positive testing",
					"item": [
						{
							"name": "check successfull login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check succesfull login\",()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"tolik1234\",\r\n    \"password\":\"password1234ER\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check unavailabiltiy of user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check unavailable user\",()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/User/validateUserName/oleg1234",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"User",
										"validateUserName",
										"oleg1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check available user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check available user\",()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.eql(true);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/api/User/validateUserName/anatolii",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"User",
										"validateUserName",
										"anatolii"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "negative",
					"item": [
						{
							"name": "post an existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check status code is not 200 for existing user\",()=> {\r",
											"    pm.expect(pm.response.code).to.not.eql(200);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 0,\r\n  \"firstName\": \"anatolii\",\r\n  \"lastName\": \"vasylenko\",\r\n  \"username\": \"user\",\r\n  \"password\": \"password1234ER1\",\r\n  \"gender\": \"Male\",\r\n  \"userTypeId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/User",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"User"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://bookcart.azurewebsites.net/",
			"type": "string"
		},
		{
			"key": "book_api",
			"value": "api/Book",
			"type": "string"
		},
		{
			"key": "test_user_id",
			"value": "23018",
			"type": "string"
		}
	]
}